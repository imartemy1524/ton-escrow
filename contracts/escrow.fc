#include "data.fc";
#include "messages.fc";
#include "imports/stdlib.fc";

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int _my_balance, int _msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    if(op == op::deploy) {
        ;; suppose that when contract is not deployed, it contains random uint256
        var data = get_data().begin_parse();
        throw_if(error::already_deployed, data~load_bool()); ;; throw if already deployed
        ;; set data
        set_data(in_msg_body~load_ref());
        return ();
    }
    load_data(); ;; if contract is closed or not deployed, function throws an error
    slice to = null();
    if (op == op::withdraw) {
        require_withdraw(sender_address);
        ;; send_tokens_to(worker, sender_address); ;; send the amount to the sender (if the work is done)
        to = worker;
    }
    elseif (op == op::refund) {
        require_refund(sender_address);
        ;; send_tokens_to(investor, sender_address); ;; send the amount to the sender (if the work is not done)
        to = investor;
    }
    ifnot(null?( to)) {
        send_tokens_to(to, sender_address);
    }
    else {
        throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw exception
    }
}

